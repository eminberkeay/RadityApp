{"ast":null,"code":"const login = async credentials => {\n  try {\n    const response = await fetch('/api/login', {\n      // Use /login or /token based on your backend\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials)\n    });\n    const data = await response.json();\n    if (response.ok) {\n      // Save the token and user data\n      localStorage.setItem('authToken', data.access_token); // Adjust to `access_token` as returned from backend\n      setIsAuthenticated(true);\n      setUser(data.user); // Set actual user data\n      return true;\n    } else {\n      setIsAuthenticated(false);\n      setUser(null);\n      return false;\n    }\n  } catch (error) {\n    console.error('Login failed:', error);\n    setIsAuthenticated(false);\n    setUser(null);\n    return false;\n  }\n};","map":{"version":3,"names":["login","credentials","response","fetch","method","headers","body","JSON","stringify","data","json","ok","localStorage","setItem","access_token","setIsAuthenticated","setUser","user","error","console"],"sources":["/Users/eminberkeay/Desktop/radity/venv/frontend/src/context/AuthContext.js"],"sourcesContent":["const login = async (credentials) => {\n    try {\n        const response = await fetch('/api/login', {  // Use /login or /token based on your backend\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(credentials)\n        });\n\n        const data = await response.json();\n\n        if (response.ok) {\n            // Save the token and user data\n            localStorage.setItem('authToken', data.access_token);  // Adjust to `access_token` as returned from backend\n            setIsAuthenticated(true);\n            setUser(data.user); // Set actual user data\n            return true;\n        } else {\n            setIsAuthenticated(false);\n            setUser(null);\n            return false;\n        }\n    } catch (error) {\n        console.error('Login failed:', error);\n        setIsAuthenticated(false);\n        setUser(null);\n        return false;\n    }\n};\n"],"mappings":"AAAA,MAAMA,KAAK,GAAG,MAAOC,WAAW,IAAK;EACjC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,YAAY,EAAE;MAAG;MAC1CC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,WAAW;IACpC,CAAC,CAAC;IAEF,MAAMQ,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAElC,IAAIR,QAAQ,CAACS,EAAE,EAAE;MACb;MACAC,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEJ,IAAI,CAACK,YAAY,CAAC,CAAC,CAAE;MACvDC,kBAAkB,CAAC,IAAI,CAAC;MACxBC,OAAO,CAACP,IAAI,CAACQ,IAAI,CAAC,CAAC,CAAC;MACpB,OAAO,IAAI;IACf,CAAC,MAAM;MACHF,kBAAkB,CAAC,KAAK,CAAC;MACzBC,OAAO,CAAC,IAAI,CAAC;MACb,OAAO,KAAK;IAChB;EACJ,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;IACrCH,kBAAkB,CAAC,KAAK,CAAC;IACzBC,OAAO,CAAC,IAAI,CAAC;IACb,OAAO,KAAK;EAChB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}